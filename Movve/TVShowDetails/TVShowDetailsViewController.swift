//
//  TVShowDetailsViewController.swift
//  Movve
//
//  Created by Victor Rubenko on 02.06.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import SnapKit

final class TVShowDetailsViewController: DetailsViewController {
    
    // MARK: - Public properties -
    
    var presenter: TVShowDetailsPresenterInterface!
    
    // MARK: - Private properties -
    private lazy var collecitonView: UICollectionView = {
        let collecitonView = UICollectionView(
            frame: .zero,
            collectionViewLayout: UICollectionViewCompositionalLayout(sectionProvider: { sectionIndex, _ in
                self.createCollectionLayout(sectionIndex)
            })
        )
        collecitonView.register(
            PosterInfoCollectionViewCell.self,
            forCellWithReuseIdentifier: PosterInfoCollectionViewCell.identifier
        )
        collecitonView.register(
            OverviewCollectionViewCell.self,
            forCellWithReuseIdentifier: OverviewCollectionViewCell.identifier
        )
        collecitonView.register(
            CastMemberCollectionViewCell.self,
            forCellWithReuseIdentifier: CastMemberCollectionViewCell.identifier
        )
        collecitonView.register(
            RatingCollectionViewCell.self,
            forCellWithReuseIdentifier: RatingCollectionViewCell.identifier
        )
        collecitonView.register(
            WatchNowCollectionViewCell.self,
            forCellWithReuseIdentifier: WatchNowCollectionViewCell.identifier
        )
        collecitonView.register(
            VideoCollectionViewCell.self,
            forCellWithReuseIdentifier: VideoCollectionViewCell.identifier
        )
        collecitonView.register(
            CollectionHeaderView.self,
            forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader,
            withReuseIdentifier: CollectionHeaderView.identifier
        )
        collecitonView.delegate = self
        collecitonView.dataSource = self
        collecitonView.contentInsetAdjustmentBehavior = .never
        collecitonView.backgroundColor = .clear
        collecitonView.showsVerticalScrollIndicator = false
        collecitonView.contentInset.bottom = 30
        return collecitonView
    }()
    
    // MARK: - Lifecycle -
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupViews()
        presenter.loadData()
        
    }
    
}

// MARK: - Extensions -

private extension TVShowDetailsViewController {
    func setupViews() {
        view.backgroundColor = .appBackground
        
        view.addSubview(collecitonView)
        collecitonView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        collecitonView.addSubview(posterInfoView)
        posterInfoView.snp.makeConstraints { make in
            make.top.equalTo(view)
            make.leading.equalTo(view)
            make.trailing.equalTo(view)
            posterHeight = make.height.equalTo(view.bounds.height * 0.65).constraint
        }
        collecitonView.contentInset.top = posterHeight.layoutConstraints.first!.constant
    }
    
    func createCollectionLayout(_ sectionIndex: Int) -> NSCollectionLayoutSection {
        let section = presenter.sections[sectionIndex]
        switch section {
        case .rating:
            let itemSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(1),
                heightDimension: .estimated(10)
            )
            let item = NSCollectionLayoutItem(layoutSize: itemSize)
            let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitems: [item])
            let section = NSCollectionLayoutSection(group: group)
            section.contentInsets = NSDirectionalEdgeInsets(top: 20, leading: 20, bottom: 20, trailing: 20)
            return section
        case .overview:
            let itemSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(1),
                heightDimension: .estimated(44)
            )
            let item = NSCollectionLayoutItem(layoutSize: itemSize)
            let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitems: [item])
            let section = NSCollectionLayoutSection(group: group)
            section.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 20, bottom: 0, trailing: 20)
            return section
        case .cast:
            let itemSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(0.2),
                heightDimension: .estimated(10)
            )
            let item = NSCollectionLayoutItem(layoutSize: itemSize)
            let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitem: item, count: 1)
            let section = NSCollectionLayoutSection(group: group)
            section.orthogonalScrollingBehavior = .continuous
            section.contentInsets = NSDirectionalEdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20)
            
            let headerSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(1),
                heightDimension: .absolute(44)
            )
            let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(
                layoutSize: headerSize,
                elementKind: UICollectionView.elementKindSectionHeader,
                alignment: .top
            )
            section.boundarySupplementaryItems = [sectionHeader]
            return section
        case .watchNow:
            let itemSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(1),
                heightDimension: .estimated(10)
            )
            let item = NSCollectionLayoutItem(layoutSize: itemSize)
            let group = NSCollectionLayoutGroup.horizontal(layoutSize: itemSize, subitem: item, count: 1)
            let section = NSCollectionLayoutSection(group: group)
            section.contentInsets = NSDirectionalEdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20)
            return section
        case .video:
            let itemSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(1),
                heightDimension: .fractionalHeight(1)
            )
            let item = NSCollectionLayoutItem(layoutSize: itemSize)
            let groupSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(1),
                heightDimension: .fractionalHeight(0.33)
            )
            let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])
            group.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 0, bottom: 0, trailing: 40)
            
            let section = NSCollectionLayoutSection(group: group)
            section.orthogonalScrollingBehavior = .paging
            section.contentInsets = NSDirectionalEdgeInsets(top: 10, leading: 20, bottom: 10, trailing: -20)
            
            let headerSize = NSCollectionLayoutSize(
                widthDimension: .fractionalWidth(1),
                heightDimension: .absolute(44)
            )
            let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(
                layoutSize: headerSize,
                elementKind: UICollectionView.elementKindSectionHeader,
                alignment: .top
            )
            section.boundarySupplementaryItems = [sectionHeader]
            
            return section
        }
    }
}

extension TVShowDetailsViewController: TVShowDetailsViewInterface {
    func reloadData() {
        collecitonView.reloadData()
        guard let tvShow = presenter.tvShow else {
            return
        }
        title = tvShow.title
        posterInfoView.configure(
            posterURL: tvShow.posterURL,
            title: tvShow.title,
            releaseYear: tvShow.releaseYear,
            genres: tvShow.genres,
            duration: tvShow.duration
        )
    }
}

// MARK: - UICollectionView Delegate/DS -

extension TVShowDetailsViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        presenter.sections.count
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        let sectionType = presenter.sections[section]
        switch sectionType {
        case .overview:
            return 1
        case .rating:
            return 1
        case .cast:
            return presenter.cast.count
        case .watchNow:
            return 1
        case .video:
            return presenter.videos.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let sectionType = presenter.sections[indexPath.section]
        
        switch sectionType {
        case .overview:
            let cell = collectionView.dequeueReusableCell(
                withReuseIdentifier: OverviewCollectionViewCell.identifier,
                for: indexPath
            ) as! OverviewCollectionViewCell
            if let movieDetails = presenter.tvShow {
                cell.text = movieDetails.overview
            }
            return cell
        case .cast:
            let castMemberModel = presenter.cast[indexPath.row]
            let cell = collectionView.dequeueReusableCell(
                withReuseIdentifier: CastMemberCollectionViewCell.identifier,
                for: indexPath
            ) as! CastMemberCollectionViewCell
            cell.configure(castMemberModel)
            return cell
        case .rating:
            let cell = collectionView.dequeueReusableCell(
                withReuseIdentifier: RatingCollectionViewCell.identifier,
                for: indexPath
            ) as! RatingCollectionViewCell
            if let movieDetails = presenter.tvShow {
                cell.rating = movieDetails.rating
            }
            return cell
        case .watchNow:
            let cell = collectionView.dequeueReusableCell(
                withReuseIdentifier: WatchNowCollectionViewCell.identifier,
                for: indexPath
            ) as! WatchNowCollectionViewCell
            cell.buttonAction = { [weak self] in
                self?.presenter.selectWatchNow()
            }
            return cell
        case .video:
            let cell = collectionView.dequeueReusableCell(
                withReuseIdentifier: VideoCollectionViewCell.identifier,
                for: indexPath
            ) as! VideoCollectionViewCell
            let video = presenter.videos[indexPath.row]
            cell.videoID = video.key
            cell.name = video.name
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        let headerView = collectionView.dequeueReusableSupplementaryView(
            ofKind: UICollectionView.elementKindSectionHeader,
            withReuseIdentifier: CollectionHeaderView.identifier,
            for: indexPath) as! CollectionHeaderView
        let sectionType = presenter.sections[indexPath.section]
        switch sectionType {
        case .cast:
            headerView.text = "Cast"
        case .video:
            headerView.text = "Trailers"
        default:
            break
        }
        headerView.label.font = .systemFont(ofSize: 20, weight: .semibold)
        return headerView
    }
}

