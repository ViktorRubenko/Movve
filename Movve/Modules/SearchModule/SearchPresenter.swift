//
//  SearchPresenter.swift
//  Movve
//
//  Created by Victor Rubenko on 04.06.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

enum SearchScopes: String {
    case Movie, TVShow
}

final class SearchPresenter {

    // MARK: - Private properties -

    private unowned let view: SearchViewInterface
    private let interactor: SearchInteractorInterface
    private let wireframe: SearchWireframeInterface
    private var items: [ItemModel] = [] {
        didSet {
            view.reloadData()
        }
    }
    private let _scopes: [SearchScopes] = [.Movie, .TVShow]
    private var currentScope: SearchScopes = .Movie {
        didSet {
            view.reloadData()
        }
    }

    // MARK: - Lifecycle -

    init(
        view: SearchViewInterface,
        interactor: SearchInteractorInterface,
        wireframe: SearchWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension SearchPresenter: SearchPresenterInterface {
    var scopes: [String] {
        _scopes.map { $0.rawValue }
    }
    
    var numberOfItems: Int {
        items.count
    }
    
    func searchData(query: String?) {
        guard let query = query, !query.isEmpty else {
            items = []
            return
        }
        switch currentScope {
        case .Movie:
            interactor.searchMovies(query: query) { result in
                switch result {
                case .success(let items):
                    self.items = items
                case .failure(let error):
                    self.wireframe.showAlert(with: "Error", message: error.localizedDescription)
                }
            }
        case .TVShow:
            interactor.searchTVShows(query: query) { result in
                switch result {
                case .success(let items):
                    self.items = items
                case .failure(let error):
                    self.wireframe.showAlert(with: "Error", message: error.localizedDescription)
                }
            }
        }
    }
    
    func item(for indexPath: IndexPath) -> ItemModel {
        items[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        switch currentScope {
        case .Movie:
            wireframe.navigateToMovieDetails(movieId: item(for: indexPath).id)
        case .TVShow:
            wireframe.navigateToTVShowDetails(tvShowId: item(for: indexPath).id)
        }
    }
    
    func didSelectScope(index: Int, query: String?) {
        currentScope = _scopes[index]
        searchData(query: query)
    }
    
}
