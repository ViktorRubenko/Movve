//
//  FavoritesPresenter.swift
//  Movve
//
//  Created by Victor Rubenko on 30.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation

fileprivate enum FavoriteSegments: String {
    case Movie, TVShow
}

fileprivate enum SortOptions: String {
    case dateAdded = "Date Added"
    case title = "Title"
    case rating = "Rating"
}

final class FavoritesPresenter {

    // MARK: - Private properties -

    private unowned let view: FavoritesViewInterface
    private let interactor: FavoritesInteractorInterface
    private let wireframe: FavoritesWireframeInterface
    private var _items = [FavoriteModel]()
    private var currentFavorites: FavoriteSegments = .Movie
    private var _segments: [FavoriteSegments] = [.Movie, .TVShow]
    private var _sortOptions: [SortOptions] = [.dateAdded, .title, .rating]
    private var currentSortOption: SortOptions = .dateAdded

    // MARK: - Lifecycle -

    init(
        view: FavoritesViewInterface,
        interactor: FavoritesInteractorInterface,
        wireframe: FavoritesWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

extension FavoritesPresenter: FavoritesPresenterInterface {
    var sortOptions: [String] {
        _sortOptions.map { $0.rawValue }
    }
    
    var items: [FavoriteModel] {
        _items
    }
    
    var segments: [String] {
        _segments.map { $0.rawValue }
    }
    
    func loadData() {
        let key: FavoriteModelSortedKey
        let ascending: Bool
        switch currentSortOption {
        case .dateAdded:
            key = .dateAdded
            ascending = false
        case .rating:
            key = .rating
            ascending = false
        case .title:
            key = .title
            ascending = true
        }
        
        switch currentFavorites {
            case .Movie:
            _items = interactor.getFavoriteMovies(sortedBy: key, ascending: ascending)
            case .TVShow:
            _items = interactor.getFavoriteTVShows(sortedBy: key, ascending: ascending)
        }
        view.reloadData()
    }
    
    func didSelectSegment(index: Int) {
        currentFavorites = _segments[index]
        loadData()
    }
    
    func item(for indexPath: IndexPath) -> FavoriteModel {
        _items[indexPath.row]
    }
    
    func didSelectItem(indexPath: IndexPath) {
        switch currentFavorites {
        case .Movie:
            wireframe.navigateToMovieDetails(movieId: item(for: indexPath).id)
        case .TVShow:
            wireframe.navigateToTVShowDetails(tvShowId: item(for: indexPath).id)
        }
    }
    
    func swapToRemove(indexPath: IndexPath) {
        switch currentFavorites {
        case .Movie:
            interactor.removeFavoriteMovie(id: item(for: indexPath).id)
        case .TVShow:
            interactor.removeFavoriteTVShow(id: item(for: indexPath).id)
        }
        _items.remove(at: indexPath.row)
        view.removeItem(at: indexPath)
    }
    
    func didSelectSort(by value: String) {
        guard let sortOption = SortOptions(rawValue: value) else {
            return
        }
        currentSortOption = sortOption
        loadData()
    }
}
