//
//  MovieDetailsPresenter.swift
//  Movve
//
//  Created by Victor Rubenko on 30.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class MovieDetailsPresenter {

    // MARK: - Private properties -

    private unowned let view: MovieDetailsViewInterface
    private let interactor: MovieDetailsInteractorInterface
    private let wireframe: MovieDetailsWireframeInterface
    
    private let mapper: MovieDBMapperInterface
    
    private let movieId: Int
    private var movie: Movie? {
        didSet {
            view.reloadMovieDetails()
        }
    }
    private var cast: [CastMember] = [] {
        didSet {
            view.reloadCast()
        }
    }

    // MARK: - Lifecycle -

    init(
        view: MovieDetailsViewInterface,
        interactor: MovieDetailsInteractorInterface,
        wireframe: MovieDetailsWireframeInterface,
        mapper: MovieDBMapperInterface,
        movieId: Int
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.mapper = mapper
        self.movieId = movieId
    }
}

// MARK: - Extensions -

extension MovieDetailsPresenter: MovieDetailsPresenterInterface {
    var movieDetails: MovieDetailsModel? {
        guard let movie = movie else {
            return nil
        }
        return mapper.movieToMovieDetailsModel(movie)
    }
    
    var castMembers: [CastMemberModel] {
        cast.compactMap { mapper.castMemberToCastMemberModel($0) }
    }
    
    var sections: [MovieDetailsSectionType] {
        [.posterInfo, .rating, .overview, .cast]
    }
    
    func loadMovieDetails() {
        interactor.getMovieDetails(id: movieId) { result in
            switch result {
            case .success(let movie):
                self.movie = movie
            case .failure(let error):
                print(error)
            }
        }
    }
    
    func loadCast() {
        interactor.getCast(id: movieId) { result in
            switch result {
            case .success(let cast):
                self.cast = cast.cast
            case .failure(let error):
                print(error)
            }
        }
    }
    
}
