//
//  MovieDetailsPresenter.swift
//  Movve
//
//  Created by Victor Rubenko on 30.05.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class MovieDetailsPresenter {

    // MARK: - Private properties -

    private unowned let view: MovieDetailsViewInterface
    private let interactor: MovieDetailsInteractorInterface
    private let wireframe: MovieDetailsWireframeInterface
    
    private let mapper: MovieDBMapperInterface
    
    private let movieId: Int
    private var _movie: Movie?
    private var _cast: [CastMember] = []
    private var _sections: [MovieDetailsSectionType] = []
    private var _videos: [Video] = []

    // MARK: - Lifecycle -

    init(
        view: MovieDetailsViewInterface,
        interactor: MovieDetailsInteractorInterface,
        wireframe: MovieDetailsWireframeInterface,
        mapper: MovieDBMapperInterface,
        movieId: Int
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.mapper = mapper
        self.movieId = movieId
    }
}

// MARK: - Extensions -

extension MovieDetailsPresenter: MovieDetailsPresenterInterface {
    var movie: MovieDetailsModel? {
        guard let movie = _movie else {
            return nil
        }
        return mapper.movieToMovieDetailsModel(movie)
    }
    
    var cast: [CastMemberModel] {
        _cast.compactMap { mapper.castMemberToCastMemberModel($0) }
    }
    
    var sections: [MovieDetailsSectionType] {
        _sections
    }
    
    var videos: [Video] {
        _videos
    }
    
    func loadData() {
        
        let group = DispatchGroup()
        
        group.enter()
        interactor.getMovieDetails(id: movieId) { result in
            switch result {
            case .success(let movie):
                self._movie = movie
            case .failure(let error):
                self.wireframe.showAlertAndBack(with: "Error", message: error.localizedDescription)
            }
            group.leave()
        }
        
        group.enter()
        interactor.getCast(id: movieId) { result in
            switch result {
            case .success(let cast):
                self._cast = cast.cast
            case .failure(let error):
                self.wireframe.showAlertAndBack(with: "Error", message: error.localizedDescription)
            }
            group.leave()
        }
        
        group.enter()
        interactor.getVideos(id: movieId) { result in
            switch result {
            case .success(let videos):
                self._videos = videos.compactMap {
                    if $0.site.lowercased() == "youtube" && $0.name.lowercased().contains("trailer") {
                        return $0
                    }
                    return nil
                }
            case .failure(let error):
                self.wireframe.showAlertAndBack(with: "Error", message: error.localizedDescription)
            }
            group.leave()
        }
        
        group.notify(queue: .main) {
            if self._movie != nil {
                self._sections.append(contentsOf: [.rating, .overview])
            }
            if !self._cast.isEmpty {
                self._sections.append(.cast)
            }
            if self._movie?.homepage != nil && URL(string: self._movie!.homepage!) != nil {
                self._sections.append(.watchNow)
            }
            if !self._videos.isEmpty {
                self._sections.append(.video)
            }
            self.view.reloadData()
        }
    }
    
    func selectWatchNow() {
        guard let homepage = _movie?.homepage, let url = URL(string: homepage) else {
            return
        }
        wireframe.openURL(url: url)
    }
    
}
